h1. Api Design

* The API design should be simple as possible, so they will just have one method to change the shards, the method using, which will be different in the context that him get called. In controller, they will send all queries in the action or controller to a specified shard. So, if you want to get all of your application sharded, you need to do a before_filter in the application controller.
* The other method will be sharded_by, which selects the shard using a attribute of the model. This method is just accessible from class method on ActiveRecord::Base.
* The using method also could be called from models, as a scope, or receiving a block, that will run all the methods inside a specific shard.
* Also, the using method could be called from migrations. For default, migrations should run only in the master database, if you want to run in a different database, you should specify where you wish that migration run. like this:
<pre>
# This will run in all, master and slaves
  class AddNameFieldToUser < ActiveRecord::Migration
    using(:all)
    #or
    using_all
    
    def self.up
      add_column  :users, :name, :string
    end

    def self.down
      remove_column  :users, :name, :string    
    end
  end
  
  
# This will run just in all slaves
  class AddNameFieldToUser < ActiveRecord::Migration
    using(:slaves)
    or 
    using_slaves()

    def self.up
      add_column  :users, :name, :string
    end

    def self.down
      remove_column  :users, :name, :string    
    end
  end
  
# This will run in all shards, slaves or not
  class AddNameFieldToUser < ActiveRecord::Migration
    using(:shards)

    def self.up
      add_column  :users, :name, :string
    end

    def self.down
      remove_column  :users, :name, :string    
    end
  end
  
# This will run in specific shard
  class AddNameFieldToUser < ActiveRecord::Migration
    using(:canada)

    def self.up
      add_column  :users, :name, :string
    end

    def self.down
      remove_column  :users, :name, :string    
    end
  end
  
# This will run in the specified shards, this accepts two or more shards.
  class AddNameFieldToUser < ActiveRecord::Migration
    using(:canada, :brazil)

    def self.up
      add_column  :users, :name, :string
    end

    def self.down
      remove_column  :users, :name, :string    
    end
  end
</pre>
* The default behavior on finds will be: if you find a object from a shard, like: 

# This will find all users in brazil shard and iterate over it, saving all of them in the brazil shard
<pre>
User.using(:brazil).find(:all).each do |user|
  user.name = "Brazil"
  user.save()
end
</pre>

# This will find all users in brazil shard and iterate over it, saving all of them in the canada shard
<pre>
User.using(:brazil).find(:all).each do |user|
  user.name = "Brazil"
  user.using(:canada).save()
end
</pre>





h1. Masochism

p. Features:
* Support Multiple Database Support
* The config is stored in database.yml
* You could have a master and multiples slaves, but you couldn't change on the fly the shard. Ex: User.using(:awesome_shard)

p. Pros:
* Easy to use
* Test Coverage

p. Cons:
* Outdated (Lastest commit in January 12, 2009)
* Don't support running migrations on different shards.
* Don't support changing the shard on the fly


h1. DataFabric 

p. Features:
* Support Multiple Database Support
* The config is stored in database.yml
* You could have data that are just sharded, not replicated.
* Support on the fly sharding selecting, with blocks

p. Pros:
* Easy to use and config
* Test Coverage
* Support just sharded, not replicated data

p. Cons:
* Don't support running migrations between shards.
* Don't support changing the sharding on the model, example: User.using(:awesome_shard)



h1. DbCharmer

p. Features:
* Support Multiple Database Support
* The config is stored in database.yml
* You could have a master and multiples slaves
* You could change the shard on the fly, with this syntax: User.switch_connection_to(:awesome_shard)
* You could run migrations over shards
* You could specify configurations of shards using ruby code


p. Pros:
* Support replication and sharding
* Support migrations between shards
* Supports on the Fly changing on the model

p. Cons:
* Didn't have test coverage in the plugin project, the tests are in another project.
* Weird and complicated syntax.
* Code are much more complicated than in the others project.



h1. DataMapper Sharding 

p. Features:
* Support Multiple Database Support
* Syntax: DataMapper.setup(:external, 'mysql://someother_host/dm_core_test'); repository(:external) { Person.first }

h1. Multi-DB (http://github.com/schoefmax/multi_db)

p. Features:
* Support replication, with multiple slaves
* Load balancing between slaves
